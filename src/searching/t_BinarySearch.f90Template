!====================================================================!
!  recursive function binarySearch_i1D(this,i,imin,imax) result(iout)
!    !! Search for the integer i in an integer vector
!    !! Assumes this is sorted!
!    !! 
!====================================================================!
!  Primitive :: this(:)
!    !! Vector to search within
!  Primitive :: i
!    !! Number to find in the vector

integer(i32) :: imin
  !! Left integer
integer(i32) :: imax
  !! Right integer
integer(i32) :: iout
  !! Location of i in this. Returns -1 if not present

if (imax < imin) then
  iout=-1
  return
else
  ! Cut the search in half
  iout=(imax+imin)/2
  ! Three-Way Comparison
  if (this(iout) > v) then
    ! Result is in lower subset
    iout=binarySearch(this,v,imin,iout-1)
  elseif (this(iout) < v) then
    ! Result is in upper subset
    iout=binarySearch(this,v,iout+1,imax)
  else
    ! Result has been found
    return
  endif
endif
! end function      
