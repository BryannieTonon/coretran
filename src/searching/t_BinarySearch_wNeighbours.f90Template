!====================================================================!
!recursive function binarySearch_i1D_wNeighbours(this,i,imin,imax) result(iout)
!  !! Perform a binary search on an integer vector
!  !! Returns a length 3 integer(i32) vector where the last two entries are the left and right neighbours
!  !! The first entry of iout is -1 if the value is not present in the vector
!  !! Assumes this is sorted!
!====================================================================!
!Primitive :: this(:)
!  !! Vector to search within
!Primitive :: i
!  !! Number to find in the vector
integer(i32) :: imin
  !! Left integer
integer(i32) :: imax
  !! Right integer
integer(i32) :: iout(3)
  !! Location of i in this. iout(1) = -1 if not present with iout(2-3) as the interval

if (imax < imin) then
  iout(2)=imax;iout(3)=imin
  iout(1)=-1
  return
else
  ! Cut the search in half
  iout(1)=(imax+imin)/2
  ! Three-Way Comparison
  if (this(iout(1)) > v) then
    ! Result is in lower subset
    iout(2)=imin;iout(3)=imax
    iout=binarySearch_wNeighbours(this,v,imin,iout(1)-1)
  elseif (this(iout(1)) < v) then
    ! Result is in upper subset
    iout(2)=imin;iout(3)=imax
    iout=binarySearch_wNeighbours(this,v,iout(1)+1,imax)
  else
    ! Result has been found
    iout(2)=iout(1)-1
    iout(2)=max(1,iout(2))
    iout(3)=iout(1)+1
    iout(3)=min(size(this),iout(3))
    return
  endif
endif
! end function
